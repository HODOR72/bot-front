{"version":3,"file":"static/js/779.94d167e5.chunk.js","mappings":"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","sources":["redux/thunks/user.ts","sections/history/History.tsx","sections/usersLIst/UsersList.tsx","redux/thunks/messages.ts","sections/distribution/Distribution.tsx","redux/thunks/actions.ts","pages/PageIndex.tsx"],"sourcesContent":["import { dispatch } from '../store';\nimport { UserListParams, UserManager } from '../../@types/user';\nimport ApiClients from '../../utils/axios';\nimport { startLoading, hasError, getUserListSuccess, getUserSuccess } from '../slices/user';\n\nconst { axiosBase } = ApiClients;\n\nexport function getUserListThunk(params: UserListParams) {\n  return async () => {\n    dispatch(startLoading());\n    try {\n      const response: any = await axiosBase.get('getUsers', { params });\n      console.log(response.data);\n      dispatch(getUserListSuccess(response.data));\n    } catch (error) {\n      dispatch(hasError(error));\n    }\n  };\n}\n","import React from 'react';\nimport { Box, Button, Typography } from '@mui/material';\nimport { saveAs } from 'file-saver';\nimport { Actions } from 'src/@types/actions';\nimport * as XLSX from 'xlsx';\n\ninterface IHistory {\n  actionsList: Actions[];\n}\n\nconst History: React.FC<IHistory> = ({ actionsList }) => {\n  const convertArrayToWorkbook = (data: Actions[]) => {\n    const workbook = XLSX.utils.book_new();\n\n    const worksheetData = [\n      ['Дата', 'ID', 'Заказ', 'Телефон', 'ID Пользователя'],\n      ...data.map((item) => [formatDate(item.date), item.id, item.order, item.phone, item.userId]),\n    ];\n\n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet 1');\n\n    return workbook;\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const options: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    };\n    return date.toLocaleDateString('en-US', options);\n  };\n\n  const handleExportExcel = (list: Actions[], handleFunc: (data: Actions[]) => XLSX.WorkBook) => {\n    const workbook = handleFunc(list);\n\n    const excelBuffer = XLSX.write(workbook, { type: 'array', bookType: 'xlsx' });\n\n    const excelBlob = new Blob([excelBuffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    });\n\n    saveAs(excelBlob, 'historyActions.xlsx');\n  };\n\n  return (\n    <Box sx={{ display: 'flex', gap: 2, mb: 4 }}>\n      <Typography variant=\"h3\" component=\"h1\" paragraph>\n        История запросов\n      </Typography>\n      <Button\n        size=\"large\"\n        variant=\"contained\"\n        onClick={() => handleExportExcel(actionsList, convertArrayToWorkbook)}\n      >\n        Загрузить\n      </Button>\n    </Box>\n  );\n};\n\nexport default History;\n","import React from 'react';\nimport { Typography, Button, Box } from '@mui/material';\nimport { saveAs } from 'file-saver';\nimport { User } from 'src/@types/user';\nimport * as XLSX from 'xlsx';\n\ninterface IUsersList {\n  userList: User[];\n}\n\nconst UsersList: React.FC<IUsersList> = ({ userList }) => {\n  const convertArrayToWorkbookUsers = (data: User[]) => {\n    const workbook = XLSX.utils.book_new();\n    console.log(data);\n\n    const worksheetData = [\n      ['Имя', 'Фамилия', 'Никнейм', 'Телефон', 'ID Пользователя'],\n      ...data.map((item) => [item.name, item.surname, item.nickname, item.phone, item.userId]),\n    ];\n\n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet 1');\n\n    return workbook;\n  };\n\n  const handleExportExcel = (list: User[], handleFunc: (data: User[]) => XLSX.WorkBook) => {\n    const workbook = handleFunc(list);\n\n    const excelBuffer = XLSX.write(workbook, { type: 'array', bookType: 'xlsx' });\n\n    const excelBlob = new Blob([excelBuffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    });\n\n    saveAs(excelBlob, 'usersList.xlsx');\n  };\n\n  return (\n    <Box sx={{ display: 'flex', gap: 2, mb: 4 }}>\n      <Typography variant=\"h3\" component=\"h1\" paragraph>\n        Пользователи\n      </Typography>\n      <Button\n        size=\"large\"\n        variant=\"contained\"\n        onClick={() => handleExportExcel(userList, convertArrayToWorkbookUsers)}\n      >\n        Загрузить\n      </Button>\n    </Box>\n  );\n};\n\nexport default UsersList;\n","import { dispatch } from '../store';\nimport { MessagesList } from '../../@types/messages';\nimport ApiClients from '../../utils/axios';\nimport { hasError, addMessagesSuccess } from '../slices/messages';\n\nconst { axiosBase } = ApiClients;\n\nexport function createMessagesThunk(params: any) {\n  console.log(params);\n  return async () => {\n    try {\n      const response: { data: MessagesList } = await axiosBase.get(`sendMessages`, params);\n      dispatch(addMessagesSuccess(response.data.data));\n      return true;\n    } catch (error) {\n      dispatch(hasError(error));\n    }\n    return false;\n  };\n}\n","import {\n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n  OutlinedInput,\n  ListSubheader,\n  Button,\n  TextField,\n  InputAdornment,\n  MenuItem,\n  Pagination,\n  Box,\n} from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport { useState, useMemo } from 'react';\nimport { User } from 'src/@types/user';\nimport Iconify from 'src/components/Iconify';\nimport { dispatch } from 'src/redux/store';\nimport { createMessagesThunk } from 'src/redux/thunks/messages';\n\ntype Option = User;\n\nconst containsText = (text: string, searchText: string) =>\n  text.toLowerCase().indexOf(searchText.toLowerCase()) > -1;\n\ninterface IDistribution {\n  userList: User[];\n}\n\nconst Distribution = ({ userList }: IDistribution) => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [isSelectedAll, setIsSelectedAll] = useState<boolean>(false);\n  const [selectedOption, setSelectedOption] = useState<string[]>([]);\n  const [searchText, setSearchText] = useState<string>('');\n  const [messageText, setMessageText] = useState<string>('');\n  const [page, setPage] = useState<number>(1);\n\n  const displayedOptions = useMemo(\n    () => userList.filter((user: User) => containsText(user.nickname, searchText)),\n    [searchText]\n  );\n\n  const setSelectedAll = () => {\n    setIsSelectedAll(!isSelectedAll);\n    if (!isSelectedAll) {\n      setSelectedOption(userList.map((user: User) => user.nickname));\n    } else {\n      setSelectedOption([]);\n    }\n  };\n\n  const itemsPerPage: number = 8;\n  const totalPages: number = Math.ceil(displayedOptions.length / itemsPerPage);\n  const startIndex: number = (page - 1) * itemsPerPage;\n  const endIndex: number = startIndex + itemsPerPage;\n  let paginatedOptions: Option[];\n\n  if (!searchText.trim()) {\n    paginatedOptions = displayedOptions.slice(startIndex, endIndex);\n  } else {\n    const totalOptions: number = displayedOptions.length;\n    const totalPages: number = Math.ceil(totalOptions / itemsPerPage);\n\n    if (totalOptions === 0) {\n      paginatedOptions = [];\n    } else if (totalOptions <= itemsPerPage) {\n      paginatedOptions = displayedOptions;\n    } else {\n      if (page === totalPages) {\n        paginatedOptions = displayedOptions.slice(startIndex);\n      } else {\n        paginatedOptions = displayedOptions.slice(startIndex, endIndex);\n      }\n    }\n  }\n\n  const handlePageChange = (e: React.ChangeEvent<unknown>, value: number) => {\n    setPage(value);\n  };\n\n  const handleSend = async () => {\n    if (selectedOption.length === 0) {\n      return enqueueSnackbar('Не выбран список пользователей', { variant: 'error' });\n    }\n    if (messageText.trim() === '') {\n      return enqueueSnackbar('Не указано сообщение', { variant: 'error' });\n    }\n\n    const selectedUserIds = selectedOption.map((selectedNickname) => {\n      const selectedUser = userList.find((user: User) => user.nickname === selectedNickname);\n      return selectedUser ? selectedUser.userId : null;\n    });\n\n    const filteredUserIds = selectedUserIds.filter((userId) => userId !== null);\n\n    setSelectedOption([]);\n    setMessageText('');\n    await dispatch(\n      createMessagesThunk({\n        users: filteredUserIds,\n        message: messageText,\n      })\n    );\n    return enqueueSnackbar('Сообщение успешно отправлено', { variant: 'success' });\n  };\n  return (\n    <>\n      <Typography variant=\"h3\" component=\"h1\" paragraph>\n        Рассылка сообщений\n      </Typography>\n      <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap', mb: 4 }}>\n        <FormControl fullWidth sx={{ maxWidth: 320, width: '100%' }}>\n          <InputLabel id=\"search-select-label\">Пользователи</InputLabel>\n          <Select\n            MenuProps={{ autoFocus: false }}\n            labelId=\"search-select-label\"\n            id=\"search-select\"\n            value={selectedOption}\n            label=\"Пользователи\"\n            multiple\n            input={<OutlinedInput label=\"Пользователи\" />}\n            renderValue={(selected) => selected.join(', ')}\n            onChange={(e) => setSelectedOption(e?.target?.value as string[])}\n            onClose={() => setSearchText('')}\n          >\n            <ListSubheader sx={{ marginBottom: 2 }}>\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                sx={{ width: '100%' }}\n                onClick={setSelectedAll}\n              >\n                {isSelectedAll ? 'Отменить выбор всех' : 'Выбрать всех'}\n              </Button>\n            </ListSubheader>\n\n            <ListSubheader>\n              <TextField\n                size=\"small\"\n                autoFocus\n                placeholder=\"Поиск...\"\n                fullWidth\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <Iconify\n                        icon={'eva:search-fill'}\n                        sx={{ color: 'text.disabled', width: 20, height: 20 }}\n                      />\n                    </InputAdornment>\n                  ),\n                }}\n                onChange={(e) => setSearchText(e.target.value)}\n                onKeyDown={(e) => {\n                  if (e.key !== 'Escape') {\n                    e.stopPropagation();\n                  }\n                }}\n              />\n            </ListSubheader>\n            {paginatedOptions.map((option: Option, i: number) => (\n              <MenuItem key={i} value={option.nickname}>\n                {option.nickname}\n              </MenuItem>\n            ))}\n            <Box sx={{ marginTop: 2, display: 'flex', justifyContent: 'center' }}>\n              <Pagination\n                count={totalPages}\n                page={page}\n                onChange={handlePageChange}\n                variant=\"outlined\"\n                shape=\"rounded\"\n                color=\"primary\"\n              />\n            </Box>\n          </Select>\n        </FormControl>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Введите сообщение\"\n          variant=\"outlined\"\n          sx={{ maxWidth: 320, width: '100%' }}\n          value={messageText}\n          onChange={(e) => setMessageText(e.target.value)}\n        />\n        <Button size=\"large\" variant=\"contained\" onClick={handleSend}>\n          Отправить\n        </Button>\n      </Box>\n    </>\n  );\n};\n\nexport default Distribution;\n","import { dispatch } from '../store';\nimport { ActionsList, ActionsListParams } from '../../@types/actions';\nimport ApiClients from '../../utils/axios';\nimport { startLoading, hasError, getActionsListSuccess } from '../slices/actions';\n\nconst { axiosBase } = ApiClients;\n\nexport function getActionsListThunk(params: ActionsListParams) {\n  return async () => {\n    dispatch(startLoading());\n    try {\n      const response: { data: ActionsList } = await axiosBase.get('getActions', { params });\n      console.log(response.data);\n      dispatch(getActionsListSuccess(response.data));\n    } catch (error) {\n      dispatch(hasError(error));\n    }\n  };\n}\n","// @mui\nimport { Container } from '@mui/material';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport { useEffect } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useSelector } from 'react-redux';\nimport { RootState, dispatch } from 'src/redux/store';\nimport { getUserListThunk } from 'src/redux/thunks/user';\nimport History from 'src/sections/history/History';\nimport UsersList from 'src/sections/usersLIst/UsersList';\nimport Distribution from 'src/sections/distribution/Distribution';\nimport { getActionsListThunk } from 'src/redux/thunks/actions';\n\nexport default function PageIndex() {\n  const { themeStretch } = useSettings();\n\n  const { userList, userListParams } = useSelector((state: RootState) => state.user);\n\n  useEffect(() => {\n    dispatch(getUserListThunk(userListParams));\n  }, [dispatch, userListParams]);\n\n  const { actionsList, actionsListParams } = useSelector((state: RootState) => state.actions);\n\n  useEffect(() => {\n    dispatch(getActionsListThunk(actionsListParams));\n  }, [dispatch, actionsListParams]);\n\n  return (\n    <>\n      <Page title=\"Главная\">\n        <Container maxWidth={themeStretch ? false : 'xl'}>\n          {userList && userList.length > 0 && <Distribution userList={userList} />}\n          {userList && userList.length > 0 && <UsersList userList={userList} />}\n          {actionsList && actionsList.length > 0 && <History actionsList={actionsList} />}\n        </Container>\n      </Page>\n    </>\n  );\n}\n"],"names":["axiosBase","ApiClients","actionsList","convertArrayToWorkbook","data","workbook","XLSX","worksheetData","map","item","formatDate","date","id","order","phone","userId","worksheet","dateString","Date","toLocaleDateString","year","month","day","Box","sx","display","gap","mb","Typography","variant","component","paragraph","Button","size","onClick","list","handleFunc","excelBuffer","type","bookType","excelBlob","Blob","saveAs","handleExportExcel","userList","convertArrayToWorkbookUsers","console","log","name","surname","nickname","createMessagesThunk","params","get","response","dispatch","addMessagesSuccess","hasError","paginatedOptions","enqueueSnackbar","useSnackbar","useState","isSelectedAll","setIsSelectedAll","selectedOption","setSelectedOption","searchText","setSearchText","messageText","setMessageText","page","setPage","displayedOptions","useMemo","filter","user","text","toLowerCase","indexOf","containsText","totalPages","Math","ceil","length","startIndex","endIndex","trim","totalOptions","slice","handleSend","selectedUserIds","selectedNickname","selectedUser","find","filteredUserIds","users","message","alignItems","flexWrap","FormControl","fullWidth","maxWidth","width","InputLabel","Select","MenuProps","autoFocus","labelId","value","label","multiple","input","OutlinedInput","renderValue","selected","join","onChange","e","target","onClose","ListSubheader","marginBottom","TextField","placeholder","InputProps","startAdornment","InputAdornment","position","Iconify","icon","color","height","onKeyDown","key","stopPropagation","option","i","MenuItem","marginTop","justifyContent","Pagination","count","shape","PageIndex","themeStretch","useSettings","useSelector","state","userListParams","useEffect","startLoading","getUserListSuccess","actions","actionsListParams","getActionsListSuccess","Page","title","Container"],"sourceRoot":""}