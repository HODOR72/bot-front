{"version":3,"file":"static/js/825.29474267.chunk.js","mappings":"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","sources":["redux/thunks/user.ts","sections/history/History.tsx","sections/usersLIst/UsersList.tsx","sections/distribution/Distribution.tsx","redux/thunks/actions.ts","pages/PageIndex.tsx"],"sourcesContent":["import { dispatch } from '../store';\nimport { User, UserListParams } from '../../@types/user';\nimport ApiClients from '../../utils/axios';\nimport { startLoading, hasError, getUserListSuccess } from '../slices/user';\n\nconst { axiosBase } = ApiClients;\n\nexport function getUserListThunk(params: UserListParams) {\n  return async () => {\n    dispatch(startLoading());\n    try {\n      let sendedRequests = 0\n      let response: { data: User[] } = await axiosBase.get('getUsers', { params });\n\n      while (response.data.length === 0 && sendedRequests < 3) {\n        response = await axiosBase.get('getUsers', { params });\n        sendedRequests++\n      }\n\n      dispatch(getUserListSuccess(response.data));\n    } catch (error) {\n      dispatch(hasError(error));\n      dispatch(getUserListThunk(params));\n    }\n  };\n}\n","import React from 'react';\nimport { Box, Button, Typography } from '@mui/material';\nimport { saveAs } from 'file-saver';\nimport { Actions } from 'src/@types/actions';\nimport * as XLSX from 'xlsx';\n\ninterface IHistory {\n  actionsList: Actions[];\n}\n\nconst History: React.FC<IHistory> = ({ actionsList }) => {\n  const convertArrayToWorkbook = (data: Actions[]) => {\n    const workbook = XLSX.utils.book_new();\n\n    const worksheetData = [\n      ['Дата', 'ID', 'Заказ', 'Телефон', 'ID Пользователя'],\n      ...data.map((item) => [formatDate(item.date), item.id, item.order, item.phone, item.userId]),\n    ];\n\n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet 1');\n\n    return workbook;\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const options: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    };\n    return date.toLocaleDateString('en-US', options);\n  };\n\n  const handleExportExcel = (list: Actions[], handleFunc: (data: Actions[]) => XLSX.WorkBook) => {\n    const workbook = handleFunc(list);\n\n    const excelBuffer = XLSX.write(workbook, { type: 'array', bookType: 'xlsx' });\n\n    const excelBlob = new Blob([excelBuffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    });\n\n    saveAs(excelBlob, 'historyActions.xlsx');\n  };\n\n  return (\n    <Box sx={{ display: 'flex', gap: 2, mb: 4 }}>\n      <Typography variant=\"h3\" component=\"h1\" paragraph>\n        История запросов\n      </Typography>\n      <Button\n        size=\"large\"\n        variant=\"contained\"\n        onClick={() => handleExportExcel(actionsList, convertArrayToWorkbook)}\n      >\n        Загрузить\n      </Button>\n    </Box>\n  );\n};\n\nexport default History;\n","import React from 'react';\nimport { Typography, Button, Box } from '@mui/material';\nimport { saveAs } from 'file-saver';\nimport { User } from 'src/@types/user';\nimport * as XLSX from 'xlsx';\n\ninterface IUsersList {\n  userList: User[];\n}\n\nconst UsersList: React.FC<IUsersList> = ({ userList }) => {\n  const convertArrayToWorkbookUsers = (data: User[]) => {\n    const workbook = XLSX.utils.book_new();\n    console.log(data);\n\n    const worksheetData = [\n      ['Имя', 'Фамилия', 'Никнейм', 'Телефон', 'ID Пользователя'],\n      ...data.map((item) => [item.name, item.surname, item.nickname, item.phone, item.userId]),\n    ];\n\n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet 1');\n\n    return workbook;\n  };\n\n  const handleExportExcel = (list: User[], handleFunc: (data: User[]) => XLSX.WorkBook) => {\n    const workbook = handleFunc(list);\n\n    const excelBuffer = XLSX.write(workbook, { type: 'array', bookType: 'xlsx' });\n\n    const excelBlob = new Blob([excelBuffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    });\n\n    saveAs(excelBlob, 'usersList.xlsx');\n  };\n\n  return (\n    <Box sx={{ display: 'flex', gap: 2, mb: 4 }}>\n      <Typography variant=\"h3\" component=\"h1\" paragraph>\n        Пользователи\n      </Typography>\n      <Button\n        size=\"large\"\n        variant=\"contained\"\n        onClick={() => handleExportExcel(userList, convertArrayToWorkbookUsers)}\n      >\n        Загрузить\n      </Button>\n    </Box>\n  );\n};\n\nexport default UsersList;\n","import React, { useState, useMemo, useRef } from 'react';\nimport {\n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n  OutlinedInput,\n  ListSubheader,\n  Button,\n  TextField,\n  InputAdornment,\n  MenuItem,\n  Pagination,\n  Box,\n  TextareaAutosize,\n  styled,\n} from '@mui/material';\nimport { useSnackbar } from 'notistack';\nimport { User } from 'src/@types/user';\nimport Iconify from 'src/components/Iconify';\n\ntype Option = User;\n\nconst containsText = (text: string, searchText: string) =>\n  text.toLowerCase().indexOf(searchText.toLowerCase()) > -1;\n\ninterface IDistribution {\n  userList: User[];\n}\n\nconst Distribution = ({ userList }: IDistribution) => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [isSelectedAll, setIsSelectedAll] = useState<boolean>(false);\n  const [selectedOption, setSelectedOption] = useState<string[]>([]);\n  const [searchText, setSearchText] = useState<string>('');\n  const [page, setPage] = useState<number>(1);\n  const textAreaRef = useRef<any>(null);\n\n  const displayedOptions = useMemo(\n    () =>\n      (Array.isArray(userList) ? userList : []).filter((user: User) =>\n        containsText(user.nickname, searchText)\n      ),\n    [userList, searchText]\n  );\n\n  const setSelectedAll = () => {\n    setIsSelectedAll(!isSelectedAll);\n    if (!isSelectedAll) {\n      setSelectedOption(userList.map((user: User) => user.nickname));\n    } else {\n      setSelectedOption([]);\n    }\n  };\n\n  const itemsPerPage: number = 8;\n  const totalPages: number = Math.ceil(displayedOptions.length / itemsPerPage);\n  const startIndex: number = (page - 1) * itemsPerPage;\n  const endIndex: number = startIndex + itemsPerPage;\n  let paginatedOptions: Option[];\n\n  if (!searchText.trim()) {\n    paginatedOptions = displayedOptions.slice(startIndex, endIndex);\n  } else {\n    const totalOptions: number = displayedOptions.length;\n    const totalPages: number = Math.ceil(totalOptions / itemsPerPage);\n\n    if (totalOptions === 0) {\n      paginatedOptions = [];\n    } else if (totalOptions <= itemsPerPage) {\n      paginatedOptions = displayedOptions;\n    } else {\n      if (page === totalPages) {\n        paginatedOptions = displayedOptions.slice(startIndex);\n      } else {\n        paginatedOptions = displayedOptions.slice(startIndex, endIndex);\n      }\n    }\n  }\n\n  const handlePageChange = (e: React.ChangeEvent<unknown>, value: number) => {\n    setPage(value);\n  };\n\n  const handleSend = async () => {\n    let messageText = textAreaRef.current.value;\n    if (selectedOption.length === 0) {\n      return enqueueSnackbar('Не выбран список пользователей', { variant: 'error' });\n    }\n    if (messageText.trim() === '') {\n      return enqueueSnackbar('Не указано сообщение', { variant: 'error' });\n    }\n\n    const selectedUserIds = selectedOption.map((selectedNickname) => {\n      const selectedUser = userList.find((user: User) => user.nickname === selectedNickname);\n      return selectedUser ? selectedUser.userId : null;\n    });\n\n    const filteredUserIds = selectedUserIds.filter((userId) => userId !== null);\n\n    setSelectedOption([]);\n\n    // await dispatch(\n    //   createMessagesThunk({\n    //     users: filteredUserIds,\n    //     message: JSON.stringify(messageText),\n    //   })\n    // );\n    messageText = '';\n    return enqueueSnackbar('Сообщение успешно отправлено', { variant: 'success' });\n  };\n\n  const StyledTextarea = styled(TextareaAutosize)(\n    ({ theme }) => `\n    width: 320px;\n    font-family: IBM Plex Sans, sans-serif;\n    font-size: 0.875rem;\n    font-weight: 400;\n    line-height: 1.5;\n    padding: 12px;\n    border-radius: 12px 12px 0 12px;\n    border: 1px solid ${theme.palette.mode === 'dark' ? 'rgba(145, 158, 171, 0.32)' : '#d0d7de'};\n    color: ${theme.palette.mode === 'dark' ? 'rgb(133, 133, 133)' : '#000'};\n    background: ${theme.palette.mode === 'dark' ? '#161C24' : '#fff'};\n     &:focus-visible {\n      outline: 0;\n    }\n  `\n  );\n\n  return (\n    <>\n      <Typography variant=\"h3\" component=\"h1\" paragraph>\n        Рассылка сообщений\n      </Typography>\n      <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', mb: 4 }}>\n        <FormControl fullWidth sx={{ maxWidth: 320, width: '100%' }}>\n          <InputLabel id=\"search-select-label\">Пользователи</InputLabel>\n          <Select\n            MenuProps={{ autoFocus: false }}\n            labelId=\"search-select-label\"\n            id=\"search-select\"\n            value={selectedOption}\n            label=\"Пользователи\"\n            multiple\n            input={<OutlinedInput label=\"Пользователи\" />}\n            renderValue={(selected) => selected.join(', ')}\n            onChange={(e) => setSelectedOption(e?.target?.value as string[])}\n            onClose={() => setSearchText('')}\n            sx={{ padding: 0.72 }}\n          >\n            <ListSubheader sx={{ marginBottom: 2 }}>\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                sx={{ width: '100%' }}\n                onClick={setSelectedAll}\n              >\n                {isSelectedAll ? 'Отменить выбор всех' : 'Выбрать всех'}\n              </Button>\n            </ListSubheader>\n\n            <ListSubheader>\n              <TextField\n                size=\"small\"\n                autoFocus\n                placeholder=\"Поиск...\"\n                fullWidth\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <Iconify\n                        icon={'eva:search-fill'}\n                        sx={{ color: 'text.disabled', width: 20, height: 20 }}\n                      />\n                    </InputAdornment>\n                  ),\n                }}\n                onChange={(e) => setSearchText(e.target.value)}\n                onKeyDown={(e) => {\n                  if (e.key !== 'Escape') {\n                    e.stopPropagation();\n                  }\n                }}\n              />\n            </ListSubheader>\n            {paginatedOptions.map((option: Option, i: number) => (\n              <MenuItem key={i} value={option.nickname}>\n                {option.nickname}\n              </MenuItem>\n            ))}\n            <Box sx={{ marginTop: 2, display: 'flex', justifyContent: 'center' }}>\n              <Pagination\n                count={totalPages}\n                page={page}\n                onChange={handlePageChange}\n                variant=\"outlined\"\n                shape=\"rounded\"\n                color=\"primary\"\n              />\n            </Box>\n          </Select>\n        </FormControl>\n        <StyledTextarea\n          id=\"outlined-basic\"\n          ref={textAreaRef}\n          placeholder=\"Введите сообщение\"\n          minRows={2}\n          maxLength={4095}\n          maxRows={10}\n          style={{ maxWidth: 320, width: '100%' }}\n        />\n\n        <Button size=\"large\" variant=\"contained\" onClick={handleSend}>\n          Отправить\n        </Button>\n      </Box>\n    </>\n  );\n};\n\nexport default Distribution;\n","import { dispatch } from '../store';\nimport { ActionsList, ActionsListParams } from '../../@types/actions';\nimport ApiClients from '../../utils/axios';\nimport { startLoading, hasError, getActionsListSuccess } from '../slices/actions';\n\nconst { axiosBase } = ApiClients;\n\nexport function getActionsListThunk(params: ActionsListParams) {\n  return async () => {\n    dispatch(startLoading());\n    try {\n      const response: { data: ActionsList } = await axiosBase.get('getActions', { params });\n      console.log(response.data);\n      dispatch(getActionsListSuccess(response.data));\n    } catch (error) {\n      dispatch(hasError(error));\n    }\n  };\n}\n","// @mui\nimport { Container } from '@mui/material';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState, dispatch } from 'src/redux/store';\nimport { getUserListThunk } from 'src/redux/thunks/user';\nimport History from 'src/sections/history/History';\nimport UsersList from 'src/sections/usersLIst/UsersList';\nimport Distribution from 'src/sections/distribution/Distribution';\nimport { getActionsListThunk } from 'src/redux/thunks/actions';\n\nexport default function PageIndex() {\n  const { themeStretch } = useSettings();\n  const [userListLoaded, setUserListLoaded] = useState(false);\n\n  const { userList, userListParams } = useSelector((state: RootState) => state.user);\n\n  const { actionsList, actionsListParams } = useSelector((state: RootState) => state.actions);\n\n  useEffect(() => {\n    dispatch(getUserListThunk(userListParams)).then(() => {\n      setUserListLoaded(true);\n    });\n  }, [dispatch, userListParams]);\n\n  useEffect(() => {\n    dispatch(getActionsListThunk(actionsListParams));\n  }, [dispatch, actionsListParams]);\n\n  return (\n    <>\n      <Page title=\"Главная\">\n        <Container maxWidth={themeStretch ? false : 'xl'}>\n          {userListLoaded && (\n            <>\n              <Distribution userList={userList || []} />\n              <UsersList userList={userList || []} />\n            </>\n          )}\n          <History actionsList={actionsList || []} />\n        </Container>\n      </Page>\n    </>\n  );\n}\n"],"names":["axiosBase","ApiClients","getUserListThunk","params","dispatch","startLoading","sendedRequests","get","response","data","length","getUserListSuccess","hasError","actionsList","convertArrayToWorkbook","workbook","XLSX","worksheetData","map","item","formatDate","date","id","order","phone","userId","worksheet","dateString","Date","toLocaleDateString","year","month","day","Box","sx","display","gap","mb","Typography","variant","component","paragraph","Button","size","onClick","list","handleFunc","excelBuffer","type","bookType","excelBlob","Blob","saveAs","handleExportExcel","userList","convertArrayToWorkbookUsers","console","log","name","surname","nickname","paginatedOptions","enqueueSnackbar","useSnackbar","useState","isSelectedAll","setIsSelectedAll","selectedOption","setSelectedOption","searchText","setSearchText","page","setPage","textAreaRef","useRef","displayedOptions","useMemo","Array","isArray","filter","user","text","toLowerCase","indexOf","containsText","totalPages","Math","ceil","startIndex","endIndex","trim","totalOptions","slice","handleSend","messageText","current","value","selectedUserIds","selectedNickname","selectedUser","find","StyledTextarea","styled","TextareaAutosize","theme","palette","mode","flexWrap","FormControl","fullWidth","maxWidth","width","InputLabel","Select","MenuProps","autoFocus","labelId","label","multiple","input","OutlinedInput","renderValue","selected","join","onChange","e","target","onClose","padding","ListSubheader","marginBottom","TextField","placeholder","InputProps","startAdornment","InputAdornment","position","Iconify","icon","color","height","onKeyDown","key","stopPropagation","option","i","MenuItem","marginTop","justifyContent","Pagination","count","shape","ref","minRows","maxLength","maxRows","style","PageIndex","themeStretch","useSettings","userListLoaded","setUserListLoaded","useSelector","state","userListParams","actions","actionsListParams","useEffect","then","getActionsListSuccess","Page","title","Container"],"sourceRoot":""}